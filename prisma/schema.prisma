// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderOrigin {
  ONLINE
  IN_STORE
}

// --- Modeller ---

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  orders        Order[]
  addresses     Address[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  price       Float
  images      String[]
  stock       Int      @default(0)
  barcode     String?  @unique

  // Bir ürünün bir kategorisi olabilir (opsiyonel değil, zorunlu)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  orderItems OrderItem[]
  cartItems  CartItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// BASİTLEŞTİRİLMİŞ KATEGORİ MODELİ
model Category {
  id       String    @id @default(cuid())
  name     String    @unique // Kategori adları benzersiz olmalı
  products Product[]
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([cartId, productId])
}

model Order {
  id        String      @id @default(cuid())
  total     Float
  status    OrderStatus @default(PENDING)
  origin    OrderOrigin @default(ONLINE)
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  address   Address?    @relation(fields: [addressId], references: [id])
  addressId String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Address {
  id         String  @id @default(cuid())
  street     String
  city       String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  orders     Order[]
}

// --- NextAuth Modelleri ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
