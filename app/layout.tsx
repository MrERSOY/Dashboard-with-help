// app/layout.tsx
import type { Metadata } from "next";
import { Geist } from "next/font/google"; // Geist ve Geist_Mono importları düzeltildi
import { Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/providers/theme-provider";
import { ActiveThemeProvider } from "@/components/active-theme";
import { cookies } from "next/headers";
import { cn } from "@/lib/utils";

// META_THEME_COLORS şimdi metadata içinde kullanılıyor.
const META_THEME_COLORS = {
  light: "#ffffff",
  dark: "#09090b", // Tırnak işaretleri eklendi
};

// geistSans ve geistMono şimdi body className'inde kullanılıyor.
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
  // META_THEME_COLORS değişkeni burada kullanılarak "unused var" hatası giderildi.
  themeColor: [
    { media: "(prefers-color-scheme: light)", color: META_THEME_COLORS.light },
    { media: "(prefers-color-scheme: dark)", color: META_THEME_COLORS.dark },
  ],
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();
  const activeTheme = cookieStore.get("activeTheme")?.value;
  const isScaled = activeTheme?.endsWith("-scaled");

  return (
    <html lang="en" suppressHydrationWarning>
           {" "}
      <body
        className={cn(
          // Kullanılmayan değişken hatalarını gidermek için font değişkenleri ve
          // isScaled durumu className'e eklendi.
          geistSans.variable,
          geistMono.variable,
          "text-foreground group/body overscroll-none font-sans antialiased [--footer-height:calc(var(--spacing)*14)] [--header-height:calc(var(--spacing)*14)] xl:[--footer-height:calc(var(--spacing)*24)]",
          isScaled && "scaled-active" // isScaled kullanıldığında bir class ekler
        )}
      >
               {" "}
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
          enableColorScheme
        >
                   {" "}
          <ActiveThemeProvider initialTheme={activeTheme}>
                        {children}         {" "}
          </ActiveThemeProvider>
                 {" "}
        </ThemeProvider>
             {" "}
      </body>
         {" "}
    </html>
  );
}
